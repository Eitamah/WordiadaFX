package views.javaFX;

import javafx.fxml.FXML;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import engine.Game.eGameState;
import gameSettings.Player;
import engine.GameManager;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TabPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.Label;

import javafx.scene.control.ComboBox;
import javafx.scene.control.Tab;

import javafx.scene.layout.AnchorPane;

import javafx.scene.control.CheckBox;

import javafx.scene.control.TableView;

import javafx.scene.layout.GridPane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class GameController {
	@FXML
	private GridPane gridMainGrid;
	@FXML
	private TabPane tabPaneSettingsTab;
	@FXML
	private Tab tabGameSettings;
	@FXML
	private AnchorPane anchorTabAnchor;
	@FXML
	private CheckBox chkboxGoldFishMode;
	@FXML
	private Label labelScore;
	@FXML
	private ComboBox comboSkin;
	@FXML
	private CheckBox chckboxAnimation;
	@FXML
	private Label labelTilesLeft;
	@FXML
	private Tab tabDictionary;
	@FXML
	private TableView tableDictionary;
	@FXML
	private TableView tablePlayers;
	@FXML
	private Tab tableLetters;
	@FXML
	private TableView tableWords;
	@FXML
	private Button btnPrev;
	@FXML
	private Button btnLoadButton;
	@FXML
	private Button btnStart;
	@FXML
	private Label lblCurrentPlayer;
	@FXML
	private Button btnAddPlayer;
	@FXML
	private Button btnUndo;
	@FXML
	private Button btnFlip;
	@FXML
	private Button btnForfiet;
	@FXML
	private Label labelWord;
	@FXML
	private Button bntRollDice;
	@FXML
	private AnchorPane anchorGame;
	@FXML
	private TableColumn<StringProperty, String> tableDictionaryWordColumn;
	@FXML
	private TableColumn tableLettersLettersColumn;
	@FXML
	private TableColumn tableLettersFreqColumn;
	@FXML
	private TableColumn<Player, String> tablePlayersNameColumn;
	@FXML
	private TableColumn<Player, String> tablePlayersTypeColumn;
	@FXML
	private TableColumn<Player, Number> tablePlayersIDColumn;
	@FXML
	private TableColumn<Player, Number> tablePlayersScoreColumn;
	@FXML
	private TableColumn tableScoreNameColumn;
	@FXML
	private TableColumn tableScoreScoreColumn;
	@FXML
	private Canvas canvasBoard;
	
	Stage primaryStage;
	GameManager gameManager;
	
	public GameController(Stage primary, GameManager gm) {
		primaryStage = primary;
		gameManager = gm;
	}

	// Event Listener on ComboBox[#comboSkin].onAction
	@FXML
	public void handleSkinChanged(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on CheckBox[#chckboxAnimation].onAction
	@FXML
	public void handleAnimationCheck(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnPrev].onAction
	@FXML
	public void handlePrevBtnPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnLoadButton].onAction
	@FXML
	public void handleLoadBtnPressed(ActionEvent event) {
		if ((gameManager.getCurrentGame() == null) ||
			(gameManager.getCurrentGame().getStatus() != eGameState.RUNNING)) {
			FileChooser fileChooser = new FileChooser();
			fileChooser.setTitle("Open Resource File");
			File file = fileChooser.showOpenDialog(primaryStage);
			
			if (file != null) {
				String input = file.getAbsolutePath();
				try {
					// TODO: Add thread + progress bar
					gameManager.loadGame(input);
					loadContent();
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					ShowAlert(e.getMessage());
				}
			}
		} else {
			ShowAlert("Can't load during running game");
		}
	}
	private void loadContent() {
		chkboxGoldFishMode.setSelected(gameManager.getCurrentGame().getSettings().getDescriptor().getGameType().isGoldFishMode());

		loadPlayersTable();
		loadLettersTable();
		loadDictionaryTable();
		loadLettersTable();
		loadTilesLeftLabel();
		setCurrentPlayer();
		loadBoard();
		
	}

	private void loadPlayersTable() {
		tablePlayers.setItems(gameManager.getCurrentGame().getSettings().getDescriptor().getPlayers().getPlayersList());;
		tablePlayersNameColumn.setCellValueFactory(cellData -> cellData.getValue().getRealName());
		tablePlayersIDColumn.setCellValueFactory(cellData -> (cellData.getValue().getObserveID()));
		tablePlayersTypeColumn.setCellValueFactory(cellData -> (cellData.getValue().getObserveType()));
		tablePlayersScoreColumn.setCellValueFactory(cellData -> (cellData.getValue().getObserveScore()));
	}

	private void loadBoard() {
		// TODO Auto-generated method stub
		
	}

	private void setCurrentPlayer() {
		// TODO Auto-generated method stub
		
	}

	private void loadDictionaryTable() {
		List<String> temp = gameManager.getCurrentGame().getSettings().getDictionary().getLeastPopularWords();
		
		ObservableList<StringProperty> list = FXCollections.observableArrayList();
		for (String string : temp) {
			list.add(new SimpleStringProperty(string));
		}
		tableDictionary.setItems(list);
		tableDictionaryWordColumn.setCellValueFactory(cellData -> (cellData.getValue()));
	}

	private void loadLettersTable() {
		
	}

	private void loadTilesLeftLabel() {
		// TODO Auto-generated method stub
		
	}

	// Event Listener on Button[#btnStart].onAction
	@FXML
	public void handleStartBtnPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnAddPlayer].onAction
	@FXML
	public void handleAddPlayerBtnPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnUndo].onAction
	@FXML
	public void handleUndoPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnFlip].onAction
	@FXML
	public void handleFlipPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnForfiet].onAction
	@FXML
	public void handleForfietPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#bntRollDice].onAction
	@FXML
	public void handleRollPressed(ActionEvent event) {
		// TODO Autogenerated
	}
	
	public void ShowAlert(String message) 
	{
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setTitle("Info");
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();		
	}
}
